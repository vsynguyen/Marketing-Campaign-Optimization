import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from ydata_profiling import ProfileReport
from sklearn.model_selection import train_test_split
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import StandardScaler, OrdinalEncoder, OneHotEncoder
from sklearn.pipeline import Pipeline
from sklearn.compose import ColumnTransformer
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score



df_sp = pd.read_csv('superstore_data.csv')
# # Data Report
# profile = ProfileReport(df_sp, title='Superstore Report', explorative=True)
# profile.to_file('Superstore.html')

# Data Overview
# df_sp.describe()
# df_sp.info()
# df_sp.isnull().sum()

# traintestsplit
target = "Response"
x = df_sp.drop(target, axis=1)
y = df_sp[target]
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)

# Handle data
num_transformer = Pipeline(steps=[
    ("imputer", SimpleImputer(missing_values=-1, strategy="median")),
    ("scaler", StandardScaler())
])

# nom_transformer = Pipeline(steps=[
#     ("imputer", SimpleImputer(strategy="most_frequent")),
#     ("encoder", OneHotEncoder())
# ])

education_value = ['Graduation', '2n Cycle', 'Master', 'PhD']
ord_transformer = Pipeline(steps=[
    ("imputer", SimpleImputer(strategy="most_frequent")),
    ("encoder", OrdinalEncoder())
])

# result = ord_transformer.fit_transform(x_train[["Education"]])
# for i, j in zip(x_train[["Education"]].values, result):
#     print("Before {}. After {}".format(i,j))

preprocessor = ColumnTransformer(transformers=[
    ("num_feature", num_transformer, ["MntWines", "MntMeatProducts", "MntFishProducts", "MntSweetProducts",
                                      "MntGoldProds", "NumDealsPurchases", "NumWebPurchases", "NumCatalogPurchases",
                                      "NumStorePurchases", "NumWebVisitsMonth", "Complain"]),
    ("ord_feature", ord_transformer, ["Education"]),])


reg = Pipeline(steps=[
    ("preprocessor", preprocessor),
    ("model", LinearRegression())
])

reg.fit(x_train, y_train)
y_predict = reg.predict(x_test)
for i, j in zip(y_predict, y_test):
    print("Prediction value: {}. Actual value: {}". format(i,j))
print("MAE: {}".format(mean_absolute_error(y_test, y_predict)))
print("MSE: {}".format(mean_squared_error(y_test, y_predict)))
print("R2: {}".format(r2_score(y_test, y_predict)))
